 
 // Given a coincident point constraint and t0r0+t3r3
 // a solution is obtained by translating the object.
 // This script places two links, one red and one green.
 // The red is fixed t0r0 and the green is free t3r3.
 // Each of the links contains some geometric objects,
 // one pair of these objects are the coincident points.
 
_BGColor = White;
:OPNS;
:N3_SOLID;
:DRAW_POINT_AS_SPHERE;

SetPointSize(20);
SetLineWidth(4);

DefVarsN3();

:Black;
:e1 + e;
:Color(0.8,0.8,0.8);
:e2;
:Color(0.3,0.3,0.3);
:e3;

?move_ratio = Slider("1. move", 0.0, 1.0, 0.01, 0.0,
"Apply movement to satisfy the coincident-point constraint");

:MRed;
// Create a point
:N_r = VecN3(3,2,3);
?N_r;
// Create a sphere
:S_r = SphereN3(VecN3(1,2,3), 0.3);
//?-(*S_r);

// Create a line
:L_r =  0.5 * VecN3(1,0,0) ^ VecN3(2,3,4) ^ e;
// Create a plane 
:P_r =  0.5 * VecN3(5,0,10) ^ VecN3(1,0,0) ^ VecN3(0,1,1) ^ e;
?P_r;
?P_rn = -*P_r;
?dual_e = -e/I;

:MGreen;
// Create a point
:N_g = VecN3(-1,-1,3);
?N_g;
?-*N_g;

?e0^e;

:S_g = SphereN3(VecN3(-2,2,3), 0.4);
//?-(*S_g);
// Create a line
:L_g =  0.5 * VecN3(0,1,0) ^ VecN3(4,3,2) ^ e;
// Create a plane 
:P_g = 0.5 * VecN3(10,0,5) ^ VecN3(0,0,1) ^ VecN3(1,1,0) ^ e;

?N_g;
?N_r;
:xer = N_r^einf * N_g^einf :Orange;
:ver = N_g * N_r :Yellow;
?xer;
?ser;

:Blue;
:N_m = xer * N_g * ~xer;
?N_m;
:S_m = xer * S_g * ~xer;
:L_m = xer * L_g * ~xer;
:P_m = xer * P_g * ~xer;
	
